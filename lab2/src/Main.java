import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;

public class Main {
    private static volatile LocalTime currentTime = LocalTime.now().withNano(0);
    private static volatile LocalTime alarmTime = LocalTime.of(0, 0, 0);
    private static volatile boolean isAlarmOn = false;
    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");

    public static void main(String[] args) {
        System.out.println("=== –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫ ===");
        System.out.println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
        System.out.println("  h - –ø—Ä–∏–±–∞–≤–∏—Ç—å —á–∞—Å");
        System.out.println("  m - –ø—Ä–∏–±–∞–≤–∏—Ç—å –º–∏–Ω—É—Ç—É");
        System.out.println("  a - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫");
        System.out.println("  q - –≤—ã—Ö–æ–¥");

        startClock();
        startCommandListener();
    }

    private static void startClock() {
        Timer timer = new Timer(true);
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                currentTime = currentTime.plusSeconds(1);
                System.out.print("\r–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: " + currentTime.format(formatter));
                checkAlarm();
            }
        }, 0, 1000);
    }

    private static void startCommandListener() {
        // –ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Thread inputThread = new Thread(() -> {
            Scanner scanner = new Scanner(System.in);
            while (true) {
                System.out.print("\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ");
                String input = scanner.nextLine().trim().toLowerCase();

                switch (input) {
                    case "h":
                        alarmTime = alarmTime.plusHours(1);
                        System.out.println("–ë—É–¥–∏–ª—å–Ω–∏–∫: " + alarmTime.format(formatter));
                        break;
                    case "m":
                        alarmTime = alarmTime.plusMinutes(1);
                        System.out.println("–ë—É–¥–∏–ª—å–Ω–∏–∫: " + alarmTime.format(formatter));
                        break;
                    case "a":
                        isAlarmOn = !isAlarmOn;
                        System.out.println("–ë—É–¥–∏–ª—å–Ω–∏–∫ " + (isAlarmOn ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"));
                        break;
                    case "q":
                        System.out.println("–í—ã—Ö–æ–¥...");
                        System.exit(0);
                        break;
                    default:
                        System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
                }
            }
        });

        inputThread.setDaemon(false);
        inputThread.start();
    }

    private static void checkAlarm() {
        if (isAlarmOn && currentTime.equals(alarmTime)) {
            System.out.println("\nüîîüîîüîî –ë—É–¥–∏–ª—å–Ω–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª! üîîüîîüîî");
            isAlarmOn = false;
        }
    }
}
